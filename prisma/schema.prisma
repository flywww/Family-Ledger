// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String        @id @default(cuid()) @db.VarChar(30)
  account   String        @unique
  password  String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  balances      Balance[]
  holdings      Holding[]
  settings      Setting?
  valueData     ValueData[]
}

model Balance {
  id           Int        @id @default(autoincrement())
  date         DateTime   // Represents the month this balance refers to
  holding      Holding    @relation(fields: [holdingId], references: [id])
  holdingId    Int
  quantity     Float      // The total amount of the asset/liability for that month
  price        Float      // The price at the time of the balance
  value        Float       // Some unique value identifier, if necessary
  currency     String
  note         String?    // Optional notes related to this balance
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Holding {
  id           Int        @id @default(autoincrement())
  name         String     // Name of the asset/liability (e.g., BTC, TESLA)
  symbol       String     // Symbol for the asset/liability
  type         Type       @relation(fields: [typeId], references: [id])
  typeId       Int
  category     Category   @relation(fields: [categoryId], references: [id])
  categoryId   Int
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  sourceURL    String?
  sourceId     String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  balances     Balance[]  // Each holding will have multiple balances over time
  @@unique([name, symbol])  // Ensure combination of name and symbol is unique
}

model Category {
  id           Int        @id @default(autoincrement())
  isHide       Boolean    @default(false)
  name         String     @unique
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  holdings     Holding[]
  valueData    ValueData[]
}

model Type {
  id           Int        @id @default(autoincrement())
  name         String     @unique
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  holdings     Holding[]
  valueData    ValueData[]
}

model Setting {
  id                Int       @id @default(autoincrement())
  accountingDate    DateTime
  displayCurrency   String
  displayCategories String
  userId            String    @unique
  user              User      @relation(fields: [userId], references: [id])
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model ValueData {
  id             Int        @id @default(autoincrement())
  date           DateTime
  value          Float
  categoryId     Int
  category       Category   @relation(fields: [categoryId], references: [id])
  typeId         Int
  type           Type       @relation(fields: [typeId], references: [id])
  userId         String        
  user           User       @relation(fields: [userId], references: [id])
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  @@unique([date,categoryId,typeId,userId])
}
